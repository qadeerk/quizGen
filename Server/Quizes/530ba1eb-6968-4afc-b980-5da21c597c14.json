[{"question": {"id": 0, "value": "What does Object-Oriented Programming (OOP) focus on in software design?"}, "options": [{"id": 0, "value": "OOP focuses on organizing software design around data or objects."}, {"id": 1, "value": "OOP focuses on organizing software design around functions and procedures."}, {"id": 2, "value": "OOP prioritizes linear programming techniques over data structures."}, {"id": 3, "value": "OOP emphasizes the use of global variables in programming."}], "answerIndex": 0}, {"question": {"id": 1, "value": "What are the key principles of Object-Oriented Programming (OOP)?"}, "options": [{"id": 0, "value": "Modularity, concurrency, data flow, and recursion"}, {"id": 1, "value": "Static typing, dynamic linking, memory management, and syntax highlighting"}, {"id": 2, "value": "Encapsulation, inheritance, polymorphism, and abstraction."}, {"id": 3, "value": "Procedural programming, functional programming, logic programming, and event-driven programming"}], "answerIndex": 2}, {"question": {"id": 2, "value": "What are the main benefits of encapsulation, inheritance, and polymorphism in programming?"}, "options": [{"id": 0, "value": "Encapsulation protects data integrity, inheritance promotes code reuse, and polymorphism allows for flexible interactions."}, {"id": 1, "value": "Encapsulation allows for global access to data, inheritance eliminates the need for functions, and polymorphism restricts object interactions."}, {"id": 2, "value": "Encapsulation increases execution speed, inheritance reduces memory usage, and polymorphism simplifies syntax."}, {"id": 3, "value": "Encapsulation enhances user interface design, inheritance creates more complex code structures, and polymorphism enforces strict type checking."}], "answerIndex": 0}]