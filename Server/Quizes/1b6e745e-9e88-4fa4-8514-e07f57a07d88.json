[{"question": {"id": 0, "value": "What is conditional rendering in React?"}, "options": [{"id": 0, "value": ["It is a method to optimize performance by reducing the number of components rendered."]}, {"id": 1, "value": ["It refers to the process of styling components based on user interactions."]}, {"id": 2, "value": "It allows components to be rendered based on conditions, using syntax like {isLoggedIn == false ? <DisplayLoggedOut /> : <DisplayLoggedIn /> }."}, {"id": 3, "value": ["It is a technique for managing state in React applications."]}], "answerIndex": 2}, {"question": {"id": 1, "value": "What is React Router and how is it installed?"}, "options": [{"id": 0, "value": ["React Router is a framework for building mobile applications, installed via 'npm install react-native'."]}, {"id": 1, "value": ["React Router is a library for styling React components, installed via 'npm install styled-components'."]}, {"id": 2, "value": ["React Router is a tool for managing state in React applications, installed via 'npm install redux'."]}, {"id": 3, "value": "React Router is a library for routing in React applications, installed via 'npm i react-router-dom'."}], "answerIndex": 3}, {"question": {"id": 2, "value": "What are the key components of React Router?"}, "options": [{"id": 0, "value": "Router, Switch, Route, and Link."}, {"id": 1, "value": ["Component, State, Props, and Context"]}, {"id": 2, "value": ["View, Model, Controller, and Service"]}, {"id": 3, "value": ["Browser, Server, Client, and API"]}], "answerIndex": 0}, {"question": {"id": 3, "value": "What are the four stages of the React component lifecycle?"}, "options": [{"id": 0, "value": ["Setup, Execution, Termination, and Cleanup"]}, {"id": 1, "value": ["Creation, Rendering, Destruction, and Finalization"]}, {"id": 2, "value": ["Loading, Displaying, Refreshing, and Closing"]}, {"id": 3, "value": "Initialization, Mounting, Updating, and Unmounting."}], "answerIndex": 3}, {"question": {"id": 4, "value": "What are the two key methods invoked during the mounting phase of a component?"}, "options": [{"id": 0, "value": ["componentWillReceiveProps() before mounting and componentWillUnmount() after mounting."]}, {"id": 1, "value": ["componentWillUpdate() before mounting and componentDidUpdate() after mounting."]}, {"id": 2, "value": ["componentDidCatch() before mounting and componentWillUnmount() after mounting."]}, {"id": 3, "value": "componentWillMount() before mounting and componentDidMount() after mounting."}], "answerIndex": 3}, {"question": {"id": 5, "value": "What is the purpose of the setState() method in React?"}, "options": [{"id": 0, "value": ["To fetch data from an external API."]}, {"id": 1, "value": "To update the state object and trigger re-rendering of the component."}, {"id": 2, "value": ["To initialize the component's props."]}, {"id": 3, "value": ["To directly manipulate the DOM elements."]}], "answerIndex": 1}, {"question": {"id": 6, "value": "What do refs in React allow you to do?"}, "options": [{"id": 0, "value": "Create new components dynamically."}, {"id": 1, "value": "Handle routing within the application."}, {"id": 2, "value": "Manage state more efficiently."}, {"id": 3, "value": "Access DOM elements and React elements directly."}], "answerIndex": 3}, {"question": {"id": 7, "value": "What are Hooks in React and when were they introduced?"}, "options": [{"id": 0, "value": ["Hooks are a type of component introduced in React 15.0."]}, {"id": 1, "value": ["Hooks were introduced in React 17.0 to manage routing."]}, {"id": 2, "value": "Hooks, introduced in React 16.8, allow developers to use state and other features without class components."}, {"id": 3, "value": ["Hooks are used exclusively for styling components in React."]}], "answerIndex": 2}, {"question": {"id": 8, "value": "What does the useState() hook do in React?"}, "options": [{"id": 0, "value": "It allows functional components to declare state variables."}, {"id": 1, "value": ["It enables class components to manage lifecycle methods."]}, {"id": 2, "value": ["It allows components to directly manipulate the DOM."]}, {"id": 3, "value": ["It provides a way to handle routing in a React application."]}], "answerIndex": 0}, {"question": {"id": 9, "value": "What does the useEffect hook do in functional components?"}, "options": [{"id": 0, "value": ["It optimizes performance by memoizing component outputs."]}, {"id": 1, "value": ["It handles state management and replaces useState() in functional components."]}, {"id": 2, "value": ["It is used for rendering components conditionally based on props."]}, {"id": 3, "value": "It manages side effects and replaces componentDidUpdate(), accepting a function and an optional dependency array."}], "answerIndex": 3}, {"question": {"id": 10, "value": "What are React Fragments and when were they introduced?"}, "options": [{"id": 0, "value": ["React Fragments are used for styling components and were introduced in React 17."]}, {"id": 1, "value": "React Fragments allow rendering multiple root elements without extra 'div' tags and were introduced in React 16.2."}, {"id": 2, "value": ["React Fragments are a type of component that can only render a single child and were introduced in React 16.0."]}, {"id": 3, "value": ["React Fragments are used for state management and were introduced in React 15."]}], "answerIndex": 1}, {"question": {"id": 11, "value": "What is React Developer Tools?"}, "options": [{"id": 0, "value": "A Chrome extension for debugging and inspecting the React component tree."}, {"id": 1, "value": "A command-line tool for managing JavaScript packages."}, {"id": 2, "value": "A mobile app for building native iOS applications."}, {"id": 3, "value": "A library for creating animations in web applications."}], "answerIndex": 0}, {"question": {"id": 12, "value": "What is the purpose of CSS modules in React?"}, "options": [{"id": 0, "value": ["They are used to create JavaScript functions."]}, {"id": 1, "value": "They allow local scoping of CSS styles."}, {"id": 2, "value": ["They provide a way to manage state in React components."]}, {"id": 3, "value": ["They enable global styling across all components."]}], "answerIndex": 1}, {"question": {"id": 13, "value": "What do styled-components allow developers to do in React?"}, "options": [{"id": 0, "value": ["They provide a way to write HTML directly in CSS files."]}, {"id": 1, "value": "They enable writing CSS within JavaScript, enhancing modularity and reusability."}, {"id": 2, "value": ["They allow developers to create global stylesheets for all components."]}, {"id": 3, "value": ["They enable the use of JavaScript to manipulate the DOM directly without React."]}], "answerIndex": 1}, {"question": {"id": 14, "value": "What is prop drilling?"}, "options": [{"id": 0, "value": "Prop drilling refers to the process of merging multiple components into one."}, {"id": 1, "value": "Prop drilling is the unnecessary passing of data through multiple component levels, causing inefficiencies."}, {"id": 2, "value": "Prop drilling is a technique for optimizing data flow in a single component."}, {"id": 3, "value": "Prop drilling is the practice of using global state management to avoid passing props."}], "answerIndex": 1}, {"question": {"id": 15, "value": "What is the difference between controlled and uncontrolled components?"}, "options": [{"id": 0, "value": ["Controlled components do not use props, while uncontrolled components rely entirely on props."]}, {"id": 1, "value": ["Controlled components maintain their own state, while uncontrolled components are managed by their parent through props."]}, {"id": 2, "value": "Controlled components are managed by their parent through props, while uncontrolled components maintain their own state."}, {"id": 3, "value": ["Controlled components are always functional components, while uncontrolled components are always class components."]}], "answerIndex": 2}, {"question": {"id": 16, "value": "What does the useRef hook do in functional components?"}, "options": [{"id": 0, "value": "It provides a way to handle events in class components."}, {"id": 1, "value": "It manages the state of a functional component."}, {"id": 2, "value": "It creates a reference to a DOM element, returning a mutable ref object."}, {"id": 3, "value": "It allows for lifecycle methods in functional components."}], "answerIndex": 2}, {"question": {"id": 17, "value": "What does the componentDidMount() method do in a React component?"}, "options": [{"id": 0, "value": ["It initializes the component's state before it is rendered."]}, {"id": 1, "value": ["It updates the component's props after it has been rendered."]}, {"id": 2, "value": "It executes code after the component is rendered in the DOM during the mounting phase."}, {"id": 3, "value": ["It cleans up resources before the component is removed from the DOM."]}], "answerIndex": 2}, {"question": {"id": 18, "value": "How does ES6 syntax in React compare to ES5 syntax in terms of importing and exporting components?"}, "options": [{"id": 0, "value": ["ES5 syntax allows for dynamic imports of components, while ES6 does not."]}, {"id": 1, "value": "ES6 syntax simplifies importing and exporting components compared to ES5 syntax."}, {"id": 2, "value": ["ES6 syntax requires more boilerplate code for importing and exporting components than ES5."]}, {"id": 3, "value": ["ES5 syntax uses a single export statement for all components, whereas ES6 uses multiple export statements."]}], "answerIndex": 1}, {"question": {"id": 19, "value": "What are synthetic events in React?"}, "options": [{"id": 0, "value": "They are a type of event that only works in Internet Explorer."}, {"id": 1, "value": "They are a way to handle server-side events in Node.js."}, {"id": 2, "value": "They are a method for creating custom animations in React."}, {"id": 3, "value": "They are a cross-browser wrapper for native events that improve performance and consistency."}], "answerIndex": 3}]